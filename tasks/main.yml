---
# Set up OpenShift template application configuration management
#
# Requires vars:
#   oc_project: string
#   app_repo: string
#   app_chart: string
#   app_branch: string
#   app_owner: string
#   app_params: dict
# Optional:
#   force: boolean/string

- name: Local deployment management directory exists
  connection: local
  file:
    path: "{{ item }}/resources"
    state: directory
    recurse: true
  register: app_mgmt_dir
  with_items: # Display Only
    - "{{ mgmt_dir }}/{{ inventory_hostname }}"

- name: Collect commit ref for repo branch head
  shell: git ls-remote {{ item.repo }} {{ item.branch }} | head -c 8
  changed_when: false
  register: app_remote_ref
  with_items: # <- Display Only
    - { "repo": "{{ app_repo }}", "branch": "{{ app_branch|default('master') }}" }

- name: Remote commit ref set
  set_fact: 
    app_commit: "{{ app_remote_ref.results[0].stdout }}"

- name: Check for app-config in project
  shell: oc get cm -n {{ oc_project }} app-config-{{ app_name }} --export=true -o yaml | grep -v 'creationTimestamp:\|selfLink:'
  changed_when: false
  failed_when: (app_config_cm.rc != 0) and
               (app_config_cm.stderr|default('') is not search('NotFound'))
  register: app_config_cm

- name: App Config found
  debug: var=app_config_cm.stdout_lines

- name: Existing app config loaded
  set_fact:
    app_config: "{{ app_config_cm.stdout|from_yaml }}"
    app_values_url: "{{ app_repo|regex_replace('git@(.*):(.*).git','https://\\1/\\2') }}/raw/{{ app_branch|default('master') }}/{{ app_value_file|default(app_name) }}-values.yaml"
  when: app_config_cm.rc == 0

- name: Check for app changes
  debug: msg="{{ app_config.data[item]|default('') != vars[item]|default(omit) }}"
  ignore_errors: true
  changed_when: (app_config.data[item]|default('') != vars[item]|default(omit))
  register: app_variance
  when: app_config_cm.rc == 0
  loop:
    - app_repo
    - app_branch
    - app_commit
    - app_chart

- name: Accept app configuration
  set_fact: "{{ item }}={{ app_config.data[item]|default('') }}"
  ignore_errors: true
  when: vars[item] is not defined
  changed_when: (app_config.data[item]|default('') != vars[item]|default(omit))
  loop:
    - app_repo
    - app_branch
    - app_commit
    - app_chart

- name: App Owner
  debug: var=app_owner

- name: Application Configuration found
  debug: var=app_config

# - name: Combined parameters normalized 
#   set_fact:
#     app_values: "{{ (app_config|default(dict([('data', dict([('app_params', {})]))])))['data']['app_params']|from_yaml|combine(apps_params[app_name]|default(app_params|default('{}'))|from_yaml) }}"
#   changed_when: false

- name: Application Values to be used
  debug: var=app_values

# - name: Check for Parameter changes # Broken
#   debug: msg="{{ item != lookup('vars', 'app_params') }}"
#   ignore_errors: true
#   register: app_param_variance
#   loop:
#     - "{{ app_params.data['app_params']|from_yaml }}"
#   when: app_config_cm.rc == 0

#TODO: Perform as handler only after success
- name: App config stored in project 
  k8s:
    state: present
    namespace: "{{ oc_project }}"
    definition: "{{ lookup('template', 'app-config_cm.yml.j2') }}"
    validate_certs: false  # <-- FixMe
  when: (app_config_cm.rc != 0) or (true in (app_variance.results|default([])|union(app_param_variance.results|default([]))|map(attribute='msg')|list))

- name: Chart values fetched
  get_url:
    url: "{{ item }}"
    dest: "{{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_value_file|default(app_name) }}-values.yaml"
  with_items: # Display Only
    - "{{ app_repo|regex_replace('(git@|https://)([A-Za-z0-9\\.-]*):?(.*).git','https://\\2/\\3') }}/raw/{{ app_branch|default('master') }}/{{ app_value_file|default(app_name) }}-values.yaml"

# - name: Helm repository initialized
#   command: helm repo add stable https://kubernetes-charts.storage.googleapis.com/
#   when: not (app_chart is match('http.*'))

# - name: Helm chart templated
#   debug: var=item
#   changed_when: false
#   vars:
#     release: "{{ inventory_hostname }}"
#   register: app_templated_files
#   when: item|length > 0
#   with_lines:
#     - /usr/local/bin/helm template {{ release }} {{ app_chart }} -f {{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_value_file|default(app_name) }}-values.yaml {% for param in (app_values|default({})|dict2items) %}--set {{ param.key }}={{ param.value }} {% endfor %} --output-dir {{ mgmt_dir }}/{{ inventory_hostname }}/helm | sed 's/^wrote //' | head -n -1 | xargs awk -v mgmt="{{ mgmt_dir }}/{{ inventory_hostname }}/helm/" '/\-\-\-/{d++;next};/^#/{f=mgmt"/"$3;next};{print f"-"d;print >f"-"d}' | uniq

- name: Helm chart templated
  # debug: var=item
  command: cat "{{ item }}"
  changed_when: false
  vars:
    release: "{{ inventory_hostname }}"
  register: app_templated_files
  when: item|length > 0
  with_lines:
    - /usr/local/bin/helm template {{ release }} {{ app_chart }} --version {{ app_version }} --debug -f {{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_value_file|default(app_name) }}-values.yaml {% for param in (app_values|default({})|dict2items) %}--set {{ param.key }}="{{ param.value }}" {% endfor %} --output-dir {{ mgmt_dir }}/{{ inventory_hostname }}/helm | sed 's/^wrote //' | head -n -1 | xargs awk -v mgmt="{{ mgmt_dir }}/{{ inventory_hostname }}/helm/" '/\-\-\-/{d++;next};/^#/{f=mgmt"/"$3;next};{print f"-"d;print >f"-"d}' | uniq
    # - /usr/local/bin/helm template {{ release }} {{ app_chart }} --version {{ app_version }} --debug -f {{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_value_file|default(app_name) }}-values.yaml {% for param in (app_values|default({})|dict2items) %}--set {{ param.key }}={{ param.value|regex_replace(('['|regex_escape),'"{')|regex_replace((']'|regex_escape),'}"') }} {% endfor %} --output-dir {{ mgmt_dir }}/{{ inventory_hostname }}/helm | sed 's/^wrote //' | head -n -1 | xargs awk -v mgmt="{{ mgmt_dir }}/{{ inventory_hostname }}/helm/" '/\-\-\-/{d++;next};/^#/{f=mgmt"/"$3;next};{print f"-"d;print >f"-"d}' | uniq

- name: Manifest normalized
  set_fact:
    app_specs: "[{% for rs in (app_templated_files.results|map(attribute='stdout')|list) %}{{ rs|from_yaml }}{% if not loop.last -%}, {% endif %}{% endfor %}]"

### TODO: add metadata.label
- name: Templated resource objects stored
  copy:
    dest: "{{ mgmt_dir }}/{{ inventory_hostname }}/resources/{{ k8s_env }}.{{ item.kind|lower }}.{{ item.metadata.name }}.yml"
    content: "{{ item|to_nice_yaml }}"
    backup: true
  register: app_spec_stored
  loop_control:
    label: "{{ item.kind }}/{{ item.metadata.name }}"
  loop: "{{ app_specs }}"

- name: Volume dependencies found
  set_fact:
    deps_: "{{ deps }}"
  when: resource.spec.template.spec.volumes is defined and resource.spec.template.spec.volumes|default('') is not match('')
  loop_control:
    label: "{{ resource.kind }}/{{ resource.metadata.name }}"
  vars:
    resource: "{{ item.item }}"
    deps: "[{% for dep in resource.spec.template.spec.volumes %}{% if dep.emptyDir is not defined %}{{ (dep.persistentVolumeClaim is defined)|ternary(dict([('kind', 'PersistentVolumeClaim'), ('name', dep.persistentVolumeClaim['claimName'])]), (dep.secret is defined)|ternary(dict([('kind', 'Secret'), ('name', dep.secret['secretName'])]), dict([('kind', 'ConfigMap'), ('name', dep.configMap['name'])])))|combine(dict([('parent', dict([('kind', resource.kind), ('name', resource.metadata.name), ('changed', item.changed)]))])) }}{% if not loop.last -%}, {% endif %}{% endif %}{% endfor  %}]"
    dep_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
  loop: "{{ app_spec_stored['results'] }}"
  register: resource_dependencies

- name: Dependency parents stored
  set_fact:
    app_parents: "{{ resource_dependencies.results|json_query('[*].ansible_facts.deps_')|flatten }}"

- name: Direct lineage detected
  set_fact:
    depmap_: "{{ depmap|combine(dict([('changed', item.changed)])) }}"
  loop_control:
    label: "{{ resource_path }}"
  when: depmap|length > 0
  vars:
    resource: "{{ item.item }}"
    resource_path: "{{ resource.kind }}/{{ resource.metadata.name }}"
    dep_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
    depmap: "{{ app_parents|json_query(dep_q) }}"
  register: resource_depmap
  loop: "{{ app_spec_stored['results'] }}"

- name: Dependency children stored
  set_fact:
    app_deps: "{{ resource_depmap.results|json_query('[*].ansible_facts.depmap_')|flatten }}"

- name: Parents triggered
  set_fact: 
    triggered_parents: "{{ app_deps|json_query(child_changed_q) }}"
  vars:
    child_changed_q: "[?changed] | [*].parent "

- name: Create dynamic inventory host for each resource object
  add_host:
    name: "{{ k8s_env }}.{{ inventory_hostname }}.{{ resource.kind }}.{{ resource.metadata.name }}"
    groups: 
      - k8s_resource
      - "{{ k8s_env }}"
      - "{{ 'k8s_' + resource.kind|lower }}"
    inventory_dir: "{{ inventory_dir }}"
    oc_project: "{{ oc_project }}"
    oc_token: "{{ oc_token }}"
    resource: "{{ resource }}"
    resource_path: "{{ resource.kind }}/{{ resource.metadata.name }}"
    specfile: "{{ depcheck.item.dest }}"
  when: (filestore is changed) or 
        (triggered_parents|json_query(match_q)|length > 0) or
        (force|default(false)|bool)
  vars:
    filestore: "{{ depcheck.item }}"
    resource: "{{ filestore.item }}"
    match_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
  loop: "{{ resource_depmap.results }}"
  register: app_inventory
  loop_control:
    label: "{{ resource.kind }}/{{ resource.metadata.name }}"
    loop_var: depcheck

# - debug: var=app_inventory
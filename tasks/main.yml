---
# Set up OpenShift template application configuration management
#
# Requires vars:
#   oc_project: string
#   app_repo: string
#   app_chart: string
#   app_branch: string
#   app_owner: string
#   app_params: dict
# Optional:
#   force: boolean/string

- name: Local deployment management directory exists
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  register: app_mgmt_dir
  with_items: # Display Only
    - "{{ mgmt_dir }}/{{ inventory_hostname }}/resources/{{ app_name }}"

- name: Collect commit ref for repo branch head
  shell: git ls-remote {{ item.repo }} {{ item.branch }} | head -c 8
  changed_when: false
  register: app_remote_ref
  with_items: # <- Display Only
    - { "repo": "{{ app_repo }}", "branch": "{{ app_branch|default('master') }}" }

- name: Remote commit ref set
  set_fact: 
    app_commit: "{{ app_remote_ref.results[0].stdout }}"

- name: Check for app-config in project
  shell: oc get cm -n {{ oc_project }} app-config-{{ app_name }} --export=true -o yaml | grep -v 'creationTimestamp:\|selfLink:'
  changed_when: false
  # failed_when: (app_config_cm.rc != 0) and
  failed_when: (app_config_cm.rc != 0) and
               (app_config_cm.stderr|default('') is not search('NotFound'))
  register: app_config_cm

# - name: App Config found
#   debug: var=app_config_cm.stdout_lines

- name: Existing app config loaded
  set_fact:
    app_config: "{{ app_config_cm.stdout|from_yaml }}"
    app_values_url: "{{ app_repo|regex_replace('git@(.*):(.*).git','https://\\1/\\2') }}/raw/{{ app_branch|default('master') }}/{{ app_name }}-values.yaml"
  when: app_config_cm.rc == 0

- name: Check for app changes
  debug: msg="{{ app_config.data[item]|default('') != vars[item]|default(omit) }}"
  ignore_errors: true
  changed_when: (app_config.data[item]|default('') != vars[item]|default(omit))
  register: app_variance
  when: app_config_cm.rc == 0
  loop:
    - app_repo
    - app_branch
    - app_commit
    - app_chart

- name: Accept app configuration
  set_fact: "{{ item }}={{ app_config.data[item]|default('') }}"
  ignore_errors: true
  when: vars[item] is not defined
  changed_when: (app_config.data[item]|default('') != vars[item]|default(omit))
  loop:
    - app_repo
    - app_branch
    - app_commit
    - app_chart

- name: App name
  debug: var=app_name

- name: App Owner
  debug: var=app_owner

- name: Application Configuration found
  debug: var=app_config

- name: Application Values to be used
  debug: var=app_values

# - name: Check for Parameter changes # Broken - FixThis with base64
#   debug: msg="{{ item != lookup('vars', 'app_params') }}"
#   ignore_errors: true
#   register: app_param_variance
#   loop:
#     - "{{ app_params.data['app_params']|from_yaml }}"
#   when: app_config_cm.rc == 0

#TODO: Perform as handler only after success
- name: App config stored in project 
  k8s:
    state: present
    namespace: "{{ oc_project }}"
    definition: "{{ lookup('template', 'app-config_cm.yml.j2') }}"
    validate_certs: false  # <-- FixMe
  when: (app_config_cm.rc != 0) or (true in (app_variance.results|default([])|union(app_param_variance.results|default([]))|map(attribute='msg')|list))

- name: Chart values fetched
  get_url:
    url: "{{ item }}"
    dest: "{{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_name }}-values.yaml"
  with_items: # Display Only
    - "{{ app_repo|regex_replace('(git@|https://)([A-Za-z0-9\\.-]*):?(.*).git','https://\\2/\\3') }}/raw/{{ app_branch|default('master') }}/{{ app_name }}-values.yaml"

- name: Helm chart templated
  command: cat "{{ item }}"
  changed_when: false
  vars:
    release: "{{ inventory_hostname }}"
  register: app_templated_files
  when: item|length > 0
  with_lines:
    - /usr/local/bin/helm template {{ release }} {{ app_chart }} --version {{ app_version }} --debug -f {{ mgmt_dir }}/{{ inventory_hostname }}/{{ app_name }}-values.yaml {% for param in (app_values|default({})|dict2items) %}--set {{ param.key }}="{{ param.value }}" {% endfor %} --output-dir {{ mgmt_dir }}/{{ inventory_hostname }}/helm | sed 's/^wrote //' | head -n -1 | xargs awk -v mgmt="{{ mgmt_dir }}/{{ inventory_hostname }}/helm/" '/\-\-\-/{d++;next};/^#/{f=mgmt"/"$3;next};{print f"-"d;print >f"-"d}' | uniq

- name: Manifest normalized
  set_fact:
    app_specs: "[{% for rs in (app_templated_files.results|map(attribute='stdout')|list) %}{{ rs|from_yaml }}{% if not loop.last -%}, {% endif %}{% endfor %}]"

- name: Application Kustomization detection
  stat:
    path: "{{ mgmt_dir }}/kustom-{{ app_name }}/kustomization.yaml"
  register: app_kustom_dir
  with_items: # Display Only
    - "{{ app_name }}"

- name: Kustomize base object list stored
  copy:
    dest: "{{ item }}"
    content: "apiVersion:{{' '}}kustomize.config.k8s.io/v1beta1\nresources:\n{% for tmpl in (app_templated_files.results|map(attribute='item')|list) %}  - {{ tmpl }}\n{% endfor %}"
  when: app_kustom_dir.results[0].stat.exists|default(false)
  with_items: #Display Only
    - "{{ mgmt_dir }}/{{ inventory_hostname }}/helm/{{ app_name }}/templates/kustomization.yaml"

- name: Kustomization output directories exists
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  when: app_kustom_dir.results[0].stat.exists|default(false)
  loop:
    - "{{ mgmt_dir }}/{{ inventory_hostname }}/kustom/{{ app_name }}"
    - "{{ mgmt_dir }}/{{ inventory_hostname }}/final/{{ app_name }}"

- name: Application Kustomization built
  shell: /usr/local/bin/kustomize build {{ item }} | awk -v mgmt="{{ mgmt_dir }}/{{ inventory_hostname }}/kustom/{{ app_name }}" 'BEGIN{RS="---"} { i = 0; while ( i <= NF ) { if ($i ~ /^apiVersion:?$/) { kind = 0; name = 0 }; if (kind == 0 && $i ~ /^kind:?$/) { k = tolower($(i+1)); kind = 1; name = 0 }; if ( kind == 1 && name == 0 && $i ~ /^name:?$/) { n = $(i+1); name = 1; print mgmt"/"k"."n".yml"; print > mgmt"/"k"."n".yml"}; i += 1}}'
  changed_when: false
  failed_when: app_kustom_build.stderr|default('') is match('Error')
  register: app_kustom_build
  loop: "{{ [ app_kustom_dir.results[0].stat.exists|default(false)|ternary(mgmt_dir +'/kustom-'+ app_name, []), kustom_repos[app_name]|default([]), kustom_repos[inventory_hostname]|default([]) ]|flatten }}"

- name: Kustomized resource objects stored
  copy:
    content: "{{ item|to_nice_yaml }}"
    dest: "{{ mgmt_dir }}/{{ inventory_hostname }}/final/{{ app_name }}/{{ k8s_env }}.{{ item.kind }}.{{ item.metadata.name }}.yml"
  when: app_kustom_dir.results[0].stat.exists|default(false)
  register: app_kustom_files
  loop_control:
    label: "{{ item.kind }}/{{ item.metadata.name }}"
  loop: "[{% for file in app_kustom_build.results[0].stdout_lines|default([]) %}{{ lookup('file', file)|from_yaml }}{% if not loop.last -%}, {% endif %}{% endfor %}]"

- name: Templated resource objects stored
  copy:
    dest: "{{ mgmt_dir }}/{{ inventory_hostname }}/resources/{{ k8s_env }}.{{ item.kind|lower }}.{{ item.metadata.name }}.yml"
    content: "{{ item|to_nice_yaml }}"
    backup: true
  register: app_spec_stored
  loop_control:
    label: "{{ item.kind }}/{{ item.metadata.name }}"
  loop: "{{ (app_kustom_dir.results[0].stat.exists|default(false))|ternary( app_kustom_files.results|map(attribute='item')|list, app_specs ) }}"

# - name: LOOP
#   debug: msg="{{ (app_kustom_dir.results[0].stat.exists|default(false))|ternary( app_kustom_files.results|map(attribute='item')|list, app_specs ) }}"
# - debug: var=app_spec_stored

- name: Volume dependencies found
  set_fact:
    deps_: "{{ deps }}"
  when: resource.spec.template.spec.volumes is defined and resource.spec.template.spec.volumes|default('') is not match('')
  loop_control:
    label: "{{ resource.kind }}/{{ resource.metadata.name }}"
  vars:
    resource: "{{ item.item }}"
    deps: "[{% for dep in resource.spec.template.spec.volumes %}{% if dep.emptyDir is not defined %}{{ (dep.persistentVolumeClaim is defined)|ternary(dict([('kind', 'PersistentVolumeClaim'), ('name', dep.persistentVolumeClaim['claimName'])]), (dep.secret is defined)|ternary(dict([('kind', 'Secret'), ('name', dep.secret['secretName'])]), dict([('kind', 'ConfigMap'), ('name', dep.configMap['name'])])))|combine(dict([('parent', dict([('kind', resource.kind), ('name', resource.metadata.name), ('changed', item.changed)]))])) }}{% if not loop.last -%}, {% endif %}{% endif %}{% endfor  %}]"
    dep_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
  loop: "{{ ((app_kustom_dir.results[0].stat.exists|default(false))|ternary(app_kustom_files, app_spec_stored))['results'] }}"
  # loop: "{{ app_spec_stored['results'] }}"
  register: resource_dependencies

- name: Dependency parents stored
  set_fact:
    app_parents: "{{ resource_dependencies.results|json_query('[*].ansible_facts.deps_')|flatten }}"

- name: Direct lineage detected
  set_fact:
    depmap_: "{{ depmap|combine(dict([('changed', item.changed)])) }}"
  loop_control:
    label: "{{ resource_path }}"
  when: depmap|length > 0
  vars:
    resource: "{{ item.item }}"
    resource_path: "{{ resource.kind }}/{{ resource.metadata.name }}"
    dep_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
    depmap: "{{ app_parents|json_query(dep_q) }}"
  register: resource_depmap
  loop: "{{ ((app_kustom_dir.results[0].stat.exists|default(false))|ternary(app_kustom_files, app_spec_stored))['results'] }}"
  # loop: "{{ app_spec_stored['results'] }}"

- name: Dependency children stored
  set_fact:
    app_deps: "{{ resource_depmap.results|json_query('[*].ansible_facts.depmap_')|flatten }}"

- name: Parents triggered
  set_fact: 
    triggered_parents: "{{ app_deps|json_query(child_changed_q) }}"
  vars:
    child_changed_q: "[?changed] | [*].parent "

# - name: Resource object list stored
#   template:
#     src: kustomization.yaml.j2
#     dest: "{{ item }}"
#   with_items:
#     - "{{ mgmt_dir }}/{{ inventory_hostname }}/resources/kustomization.yaml"

# - name: Create dynamic inventory host for each resource object
#   debug: msg="{{  resource_depmap.resultsf }}"
#   # add_host:
#   #   name: "{{ k8s_env }}.{{ inventory_hostname }}.{{ resource.kind }}.{{ resource.metadata.name }}"
#   #   groups: 
#   #     - k8s_resource
#   #     - "{{ k8s_env }}"
#   #     - "{{ 'k8s_' + resource.kind|lower }}"
#   #   inventory_dir: "{{ inventory_dir }}"
#   #   oc_project: "{{ oc_project }}"
#   #   oc_token: "{{ oc_token }}"
#   #   resource: "{{ resource }}"
#   #   resource_path: "{{ resource.kind }}/{{ resource.metadata.name }}"
#   #   specfile: "{{ depcheck.item.dest }}"
#   when: (filestore is changed) or 
#         (triggered_parents|json_query(match_q)|length > 0) or
#         (force|default(false)|bool)
#   vars:
#     filestore: "{{ depcheck.item }}"
#     resource: "{{ filestore.item }}"
#     match_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
#   # loop: "{{ resource_depmap.results }}"
#   # register: app_inventory
#   # loop_control:
#   #   label: "{{ resource.kind }}/{{ resource.metadata.name }}"
#   #   loop_var: depcheck

- name: Create dynamic inventory host for each resource object
  add_host:
    name: "{{ k8s_env }}.{{ inventory_hostname }}.{{ resource.kind }}.{{ resource.metadata.name }}"
    groups: 
      - k8s_resource
      - "{{ k8s_env }}"
      - "{{ 'k8s_' + resource.kind|lower }}"
    inventory_dir: "{{ inventory_dir }}"
    oc_project: "{{ oc_project }}"
    oc_token: "{{ oc_token }}"
    resource: "{{ resource }}"
    resource_path: "{{ resource.kind }}/{{ resource.metadata.name }}"
    specfile: "{{ depcheck.item.dest }}"
  when: (filestore is changed) or 
        (triggered_parents|json_query(match_q)|length > 0) or
        (force|default(false)|bool)
  vars:
    filestore: "{{ depcheck.item }}"
    resource: "{{ filestore.item }}"
    match_q: "[? kind == '{{ resource.kind }}' && name == '{{ resource.metadata.name }}' ]"
  loop: "{{ resource_depmap.results }}"
  register: app_inventory
  loop_control:
    label: "{{ resource.kind }}/{{ resource.metadata.name }}"
    loop_var: depcheck

